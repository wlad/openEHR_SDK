version: 2.1

# OVERVIEW - What this CI pipeline does:
#
# 1. build & (unit)test the SDK
# 2. build & (unit)test EHRbase w/ SDK (as local dependency)
# 3. run SDK's Java integration tests
# 4. conduct (static) code analysis w/ Sonar scanner and send results to sonarcloud.io
#    - this includes code coverage from unit & integration tests (written in Java)
# 5. run Robot integation tests (from EHRbase's repo)
# 6. publish git tag based snapshot & release versions on jitpack.io
#    - requires manually creating a release (via Github UI) from a given git tag
#    - jitpack will build related artifacts on demand


workflows:

  # WORKFLOW 1/5) Build & Test the SDK
  build_and_test_SDK:
    jobs:
      - build-openEHR_SDK:
          filters:
            branches:
              ignore:
                - master
                - develop
                - release

      - test-openEHR_SDK:
          filters:
            branches:
              ignore:
                - master
                - develop
                - release

      # - build-EHRbase:
      #     requires:
      #       - build-openEHR_SDK
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - COMPOSITION-tests-1:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - COMPOSITION-tests-2:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - COMPOSITION-tests-3:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - COMPOSITION-tests-4:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - CONTRIBUTION-tests:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - DIRECTORY-tests:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - EHRSERVICE-tests:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release
      
      # - EHRSTATUS-tests:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release
      
      # - KNOWLEDGE-tests:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - QUERYSERVICE-tests-1:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - QUERYSERVICE-tests-2:
      #     context: org-global
      #     requires:
      #       - build-EHRbase
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release

      # - ROBOT-TEST-REPORT:
      #     context: org-global
      #     requires:
      #       - COMPOSITION-tests-1
      #       - COMPOSITION-tests-2
      #       - COMPOSITION-tests-3
      #       - COMPOSITION-tests-4
      #       - CONTRIBUTION-tests
      #       - DIRECTORY-tests
      #       - EHRSERVICE-tests
      #       - EHRSTATUS-tests
      #       - KNOWLEDGE-tests
      #       - QUERYSERVICE-tests-1
      #       - QUERYSERVICE-tests-2
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #           - develop
      #           - release



  # WORKFLOW 2/5) Publish Git tags for SNAPSHOT releases
  deploy-snapshot-release:
    when:
      and:
        - equal: [ develop, << pipeline.git.branch >> ]
        # - equal: [ SNAPSHOT, << pipeline.git.tag >> ]
    jobs:
      - publish-snapshot:
          filters:
            tags:
              ignore:
                # - /^v.*/
                - /SNAPSHOT.*/



  # WORKFLOW 3/5) Publish Git tag for (stable) releases
  deploy-stable-release:
    when:
      and:
        - equal: [ release, << pipeline.git.branch >> ]
    jobs:
      - publish-release



  # # WORKFLOW 4/5) Update SDK version in EHRbase's POM /w lastest stable release
  # update-ehrbase-sdk-dependency:
  #   when:
  #     and:
  #       - equal: [ master, << pipeline.git.branch >> ]
  #   jobs:
  #     - approve-sdk-version-update:
  #         type: approval
  #     - update-ehrbase-sdk-dependency:
  #         requires:
  #           - approve-sdk-version-update



  # WORKFLOW 5/5) Code analysis w/ SonarCloud.io 
  sonar-code-analysis:
    jobs:
      - run-code-analysis:
          context: org-global
          # filters:
          #   branches:
          #     ignore:
          #       - master
          #       - develop
          #       - release







jobs:
  #           88    ,ad8888ba,    88888888ba    ad88888ba
  #           88   d8"'    `"8b   88      "8b  d8"     "8b
  #           88  d8'        `8b  88      ,8P  Y8,
  #           88  88          88  88aaaaaa8P'  `Y8aaaaa,
  #           88  88          88  88""""""8b,    `"""""8b,
  #           88  Y8,        ,8P  88      `8b          `8b
  #   88,   ,d88   Y8a.    .a8P   88      a8P  Y8a     a8P
  #    "Y8888P"     `"Y8888Y"'    88888888P"    "Y88888P"


  build-openEHR_SDK:
    description: Build and unit test the SDK.
    executor: docker-python3-java11
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      - checkout
      - cache-out-sdk-m2-dependencies
      - build-and-test-sdk
      - cache-in-sdk-m2-dependencies
      - collect-sdk-unittest-results
      - save-skd-test-results
      - save-sdk-workspace
      #-----------------------------------#---------------(use this steps for pipeline debugging only)
      # - run: echo mock build SDK        # 
      # - cache-out-sdk-workspace         #
      # - cache-in-sdk-workspace          #
  

  test-openEHR_SDK:
    description: Build and run openEHR_SDK's Java integration tests (w/ EHRbase + DB running).
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - cache-out-sdk-m2-dependencies
      - build-sdk
      - git-clone-ehrbase-repo
      - cache-out-ehrbase-m2-dependencies
      - force-ehrbase-build-to-use-local-sdk-version
      - start-ehrbase-and-run-all-tests-of-sdk
      - cache-in-ehrbase-m2-dependencies      
      - cache-in-sdk-m2-dependencies
      - collect-sdk-integrationtest-results
      - save-skd-test-results


  build-EHRbase:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      - checkout
      - restore-sdk-workspace
      - git-clone-ehrbase-repo
      - cache-out-ehrbase-m2-dependencies
      - force-ehrbase-build-to-use-local-sdk-version
      - build-and-test-ehrbase
      - cache-in-ehrbase-m2-dependencies
      - save-ehrbase-workspace
      #-----------------------------------#---------------(use this steps for pipeline debugging only
      # - run: echo MOCKED JOB            #
      # - cache-in-ehrbase-workspace      #


  COMPOSITION-tests-1:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "compositionANDjson1"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_1"

  COMPOSITION-tests-2:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "compositionANDjson2"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_2"

  COMPOSITION-tests-3:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "compositionANDxml1"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_3"

  COMPOSITION-tests-4:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "compositionANDxml2"
          test-suite-path: "COMPOSITION_TESTS"
          test-suite-name: "COMPOSITION_4"

  CONTRIBUTION-tests:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "CONTRIBUTION"
          test-suite-path: "CONTRIBUTION_TESTS"
          test-suite-name: "CONTRIBUTION"

  DIRECTORY-tests:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "directory"
          test-suite-path: "DIRECTORY_TESTS"
          test-suite-name: "DIRECTORY"

  EHRSERVICE-tests:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "EHR_SERVICE"
          test-suite-path: "EHR_SERVICE_TESTS"
          test-suite-name: "EHR_SERVICE"

  EHRSTATUS-tests:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "EHR_STATUS"
          test-suite-path: "EHR_STATUS_TESTS"
          test-suite-name: "EHR_STATUS"

  KNOWLEDGE-tests:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "KNOWLEDGE"
          test-suite-path: "KNOWLEDGE_TESTS"
          test-suite-name: "KNOWLEDGE"

  QUERYSERVICE-tests-1:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "aql_adhoc-queryANDempty_db"
          test-suite-path: "QUERY_SERVICE_TESTS"
          test-suite-name: "ADHOC-QUERY-1"

  QUERYSERVICE-tests-2:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      - restore-ehrbase-workspace
      - start-ehrbase-server
      - run-robot-tests:
          include-tags: "aql_adhoc-queryANDloaded_db"
          test-suite-path: "QUERY_SERVICE_TESTS"
          test-suite-name: "ADHOC-QUERY-2"


  ROBOT-TEST-REPORT:
    executor: docker-py3-java11-postgres
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      # - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      # - cache-out-python-requirements                 # TODO: @wlad find a solution: python cache not working yet
      - restore-test-results-folder
      - merge-robot-outputs


  publish-snapshot:
    executor: docker-python3-java11
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only!)
    description: |
      Publishes a SNAPSHOT release version via jitpack.io
      whenever one of these keywords: [major], [minor] or [patch]
      is used in a PR's merge commit title when merging a feature branch into develop.
    steps:
      - checkout
      - configure-git-for-ci-bot
      - cache-out-versionupdater-dependencies
      - update-and-publish-snapshot-release-version
      - cache-in-versionupdater-dependencies


  publish-release:
    executor: docker-python3-java11
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only!)
    description: |
      Publishes a (stable) release version via jitpack.io
      whenever a 'release' branch is pushed to remote.
    steps:
      - checkout
      - configure-git-for-ci-bot
      - cache-out-versionupdater-dependencies
      - publish-release-version


  update-ehrbase-sdk-dependency:
    executor: docker-python3-java11
    # executor: vm-ubuntu-1604                          # (use for pipeline debugging only!)
    steps:
      #-----------------------------------#---------------(use for pipeline debugging only)
      - run: echo MOCKED JOB            # 
      # - cache-out-ehrbase-workspace     #
      #-----------------------------------#
      # - checkout
      # - configure-git-for-ci-bot
      # - cache-out-versionupdater-dependencies


  run-code-analysis:
    description: |
      Runs code analysis w/ SonarCloud via CircleCI Orb provided by sonarsource team.
      Orb documentation: https://circleci.com/orbs/registry/orb/sonarsource/sonarcloud
      Scanner configuration happens in file sonar-project.properties in project's root folder.
    executor: docker-py3-java11-postgres
    steps:
      - checkout
      - cache-out-sdk-m2-dependencies
      - build-sdk
      - git-clone-ehrbase-repo
      - cache-out-ehrbase-m2-dependencies
      - force-ehrbase-build-to-use-local-sdk-version
      - start-ehrbase-and-run-all-tests-of-sdk
      - cache-in-ehrbase-m2-dependencies      
      - cache-in-sdk-m2-dependencies
      - collect-sdk-unittest-results
      - collect-sdk-integrationtest-results
      - save-skd-test-results
      - save-jacoco-coverage-report
      - sonarcloud/scan:
          cache_version: 1       # NOTE: increment this value to force cache rebuild







commands:
  #     ,ad8888ba,    ,ad8888ba,    88b           d88  88b           d88         db         888b      88  88888888ba,     ad88888ba
  #    d8"'    `"8b  d8"'    `"8b   888b         d888  888b         d888        d88b        8888b     88  88      `"8b   d8"     "8b
  #   d8'           d8'        `8b  88`8b       d8'88  88`8b       d8'88       d8'`8b       88 `8b    88  88        `8b  Y8,
  #   88            88          88  88 `8b     d8' 88  88 `8b     d8' 88      d8'  `8b      88  `8b   88  88         88  `Y8aaaaa,
  #   88            88          88  88  `8b   d8'  88  88  `8b   d8'  88     d8YaaaaY8b     88   `8b  88  88         88    `"""""8b,
  #   Y8,           Y8,        ,8P  88   `8b d8'   88  88   `8b d8'   88    d8""""""""8b    88    `8b 88  88         8P          `8b
  #    Y8a.    .a8P  Y8a.    .a8P   88    `888'    88  88    `888'    88   d8'        `8b   88     `8888  88      .a8P   Y8a     a8P
  #     `"Y8888Y"'    `"Y8888Y"'    88     `8'     88  88     `8'     88  d8'          `8b  88      `888  88888888Y"'     "Y88888P"


  update-and-publish-snapshot-release-version:
    steps:
      - install-maven
      - run:
          name: Update Snapshot Release Version
          command: |
            echo test
            last_commit="$(git log -1 --pretty=%B | cat)"
            echo $last_commit
            case $last_commit in
                *"[major]"*)
                
                    echo "bump major release version"
                    mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0 versions:commit
                    SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                    
                    git commit -am "updated major version to v${SDK_VERSION}-SNAPSHOT [skip ci]"
                    git checkout -b major-snapshot-update
                    git merge --strategy=ours develop
                    git checkout develop
                    git merge major-snapshot-update
                    git tag -a v${SDK_VERSION}-SNAPSHOT -m "v${SDK_VERSION}-SNAPSHOT release"
                    git push --set-upstream origin develop v${SDK_VERSION}-SNAPSHOT

                    exit 0
                    ;;
                *"[minor]"*)

                    echo "bump minor release version"
                    mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0 versions:commit
                    SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                    
                    git commit -am "updated minor version to v${SDK_VERSION}-SNAPSHOT [skip ci]"
                    git checkout -b minor-snapshot-update
                    git merge --strategy=ours develop
                    git checkout develop
                    git merge minor-snapshot-update
                    git tag -a v${SDK_VERSION}-SNAPSHOT -m "v${SDK_VERSION}-SNAPSHOT release"
                    git push --set-upstream origin develop v${SDK_VERSION}-SNAPSHOT

                    exit 0
                    ;;
                *"[patch]"*)

                    echo "bump patch release version"
                    mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit
                    SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
                    
                    git commit -am "updated patch version to v${SDK_VERSION}-SNAPSHOT [skip ci]"
                    git checkout -b patch-snapshot-update
                    git merge --strategy=ours develop
                    git checkout develop
                    git merge patch-snapshot-update
                    git tag -a v${SDK_VERSION}-SNAPSHOT -m "v${SDK_VERSION}-SNAPSHOT release"
                    git push --set-upstream origin develop v${SDK_VERSION}-SNAPSHOT

                    exit 0
                    ;;
                *)
                    echo "This was just a simple merge - no versions updated"
                    exit 0
                    ;;
            esac


  publish-release-version:
    steps:
      - install-maven
      - run:
          name: Create and push release version tag
          description: |
            Use this command only in a job that is triggered by push of a 'release' branch to remote.
            Don't do any commits on that 'release' branch. Just push it!
            The CI pipeline will then
            - (--hard) reset 'master' to the state of 'release' branch
            - and delete 'release' branch on remote
            Nothing is ever merged back into develop (BECAUSE THERE IS NO NEED FOR THAT!).
            Everything flows in one direction: from feature to develop from develop to master.
            The idea is to have one main branch (develop) that holds everything, including releases,
            and 'master' branch serves as backup of last (know as working) 'develop' branch.
            Besides serving as a backup 'master' can further be used to trigger other workflows
            i.e. deployments into production.
          command: |
            git branch
            SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $SDK_VERSION
            git fetch
            git checkout master
            git reset --hard release
            git push origin :release    # NOTE: this deletes realse branch on remote
            git tag -a v${SDK_VERSION} -m "v${SDK_VERSION} (stable) release"
            git push --force --set-upstream origin master v${SDK_VERSION}


  configure-git-for-ci-bot:
    steps:
      - add_ssh_keys:
          fingerprints:
            - b7:59:8b:46:65:4e:37:d9:b1:21:30:90:df:9c:c8:dd
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "ci-bot@ehrbase.org"
            git config --global user.name "ci-bot"
            # git config --global push.followTags true
            git remote -v
  

  install-xml-cli-tool:
    steps:
      - run:
          name: Install xmlstarlet to handle XML file from CLI
          command: |
            sudo killall -9 apt-get || true
            sudo apt -y update && sudo apt -y install xmlstarlet=1.6.1-2
  

  cache-out-versionupdater-dependencies:
    steps:
      - restore_cache:
          key: maven-dep-v1-

  cache-in-versionupdater-dependencies:
    steps:
      - save_cache:
          key: maven-dep-v1-
          paths:
            - ~/.m2





  # ///////////////////////////////////////////////////////////////////////////
  # /// SDK COMMANDS                                                        ///
  # ///////////////////////////////////////////////////////////////////////////
  
  build-sdk:
    steps:
      - install-maven
      - run:
          name: Maven build, install openEHR_SDK (skip Tests!)
          command: mvn install -Dmaven.javadoc.skip=true -Dmaven.test.skip
      - run:
          name: Save the version number of locally installed SDK into a file
          command: |
            SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $SDK_VERSION > SDK_VERSION
            cat SDK_VERSION


  build-and-test-sdk:
    steps:
      - install-maven
      - run:
          name: Maven build, test (ONLY unit tests), install openEHR_SDK
          command: mvn install dependency:go-offline -Dmaven.javadoc.skip=true
      - run:
          name: Save the version number of locally installed SDK into a file
          command: |
            SDK_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo $SDK_VERSION > SDK_VERSION
            cat SDK_VERSION


  build-and-integration-test-sdk:
    description: |
      WARNING: this command requires EHRbase to be up and running 
    steps:
      - install-maven
      - run:
          name: Maven run only Java integration tests of openEHR_SDK
          description: |
            Runs maven test phase using 'slow' profile defined in parent pom.xml
            This way only the Java integration tests are executed.
          command: |
            jps
            mvn test -Pslow -Dmaven.javadoc.skip=true


  start-ehrbase-and-run-all-tests-of-sdk:
    description: |
      Executes all SDK java test (unit and integration)
      This requires EHRbase + DB to be running during test execution.
    steps:
      - install-maven
      - run:
          name: Maven build EHRbase
          command: |
            cd ~/projects/ehrbase
            mvn package -Dmaven.javadoc.skip=true -Dmaven.test.skip
      - run:
          name: Start EHRbase server and run all test of SDK
          command: |
            ls -la
            cd ~/projects/ehrbase
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            java -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=false > log &
            grep -m 1 "Started EhrBase in" <(tail -f log)
            cd ..
            jps
            mvn verify -DskipIntegrationTests=false -Dmaven.javadoc.skip=true


  cache-out-sdk-m2-dependencies:
    steps:
      - run:
          name: Generate Cache Checksum for openEHR_SDK Dependencies
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/openEHR_SDK_maven_cache_seed
      - restore_cache:
          key: openEHR_SDK-


  cache-in-sdk-m2-dependencies:
    steps:
      - save_cache:
          key: openEHR_SDK-{{ checksum "/tmp/openEHR_SDK_maven_cache_seed" }}
          paths:
          - ~/.m2


  collect-sdk-unittest-results:
    steps:
      - run:
          name: Save unit test results
          command: |
            mkdir -p ~/test-results/unit-tests/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/unit-tests/ \;
            find . -type f -regex ".*/target/surefire-reports/.*txt" -exec cp {} ~/test-results/unit-tests/ \;
          when: always
  

  collect-sdk-integrationtest-results:
    steps:
      - run:
          name: Save integration test results
          command: |
            mkdir -p ~/test-results/integration-tests/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/test-results/integration-tests/ \;
            find . -type f -regex ".*/target/failsafe-reports/.*txt" -exec cp {} ~/test-results/integration-tests/ \;
          when: always

    
  save-skd-test-results:
    steps:
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results


  save-jacoco-coverage-report:
    description: |
      Uploads the overall coverage report as circleci artifact
      The separate reports for unit and integration coverage are not required.
    steps:
      # - store_artifacts:
      #     path: test-coverage/target/site/jacoco-ut-coverage
      # - store_artifacts:
      #     path: test-coverage/target/site/jacoco-it-coverage
      - store_artifacts:
          path: test-coverage/target/site/jacoco-overall-coverage
      

  save-sdk-workspace:
    steps:
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .m2
            - projects


  restore-sdk-workspace:
    description: |
      Restores any file / folder that was previously persisted w/ 'persist_to_workspace'.
      NOTE: best practise is to persist files or folders very selectively.
            Do not persist root or the whole workspace at one, otherwise concurrent jobs
            may fail to restore that stuff.
    steps:
      - attach_workspace:
          at: /home/circleci/



  # WARNING: don't use these two steps in production
  #          use them for pipeline debugging only!
  cache-in-sdk-workspace:
    steps:
      - save_cache:
          key: sdk-workspace-cache
          paths:
            - .
  cache-out-sdk-workspace:
    steps:
      - restore_cache:
          key: sdk-workspace-cache





  # ///////////////////////////////////////////////////////////////////////////
  # /// EHRBASE COMMANDS                                                    ///
  # ///////////////////////////////////////////////////////////////////////////

  git-clone-ehrbase-repo:
    steps:
      - run:
          name: Git clone EHRbase repo
          command: |
            git clone git@github.com:ehrbase/ehrbase.git
            ls -la
  

  build-and-test-ehrbase:
    steps:
      - install-maven
      - run:
          name: Maven build EHRbase
          command: |
            cd ~/projects/ehrbase
            mvn package dependency:go-offline -Dmaven.javadoc.skip=true


  cache-in-ehrbase-m2-dependencies:
    steps:
      - save_cache:
          key: EHRbase-{{ checksum "/tmp/EHRbase_maven_cache_seed" }}
          paths:
            - ~/.m2


  cache-out-ehrbase-m2-dependencies:
    steps:
      - run:
          name: Generate Cache Checksum for EHRbase Dependencies
          command: find ~/projects/ehrbase -name 'pom.xml' | sort | xargs cat > /tmp/EHRbase_maven_cache_seed
      - restore_cache:
          key: EHRbase-


  save-ehrbase-workspace:
    steps:
    - persist_to_workspace:
        root: /home/circleci
        paths:
          - projects/ehrbase


  restore-ehrbase-workspace:
    description: Attach EHRbase repo containing target folder and tests back to workspace
    steps:
      - run: ls -la
      - attach_workspace:
          at: /home/circleci/
      - run: ls -la ehrbase


  force-ehrbase-build-to-use-local-sdk-version:
    steps:
      - install-xml-cli-tool
      - run:
          name: Adjust SDK version number in EHRbase's pom
          command: |
            SDK_VERSION=$(cat ~/projects/SDK_VERSION)
            echo $SDK_VERSION
            cd ~/projects/ehrbase
            xmlstarlet edit --inplace -N my=http://maven.apache.org/POM/4.0.0 -u my:project/my:version -v $SDK_VERSION pom.xml
  


  # WARNING: don't use these two steps in production
  #          use them for pipeline debugging only!
  cache-in-ehrbase-workspace:
    steps:
      - save_cache:
          key: ehrbase-workspace-cache-v3
          paths:
            - ehrbase
  cache-out-ehrbase-workspace:
    steps:
      - restore_cache:
          key: ehrbase-workspace-cache-v3





# ///////////////////////////////////////////////////////////////////////////
# /// HELPER COMMANDS                                                    ///
# ///////////////////////////////////////////////////////////////////////////

  install-maven:
    description: Install Maven tool only if it's not already installed
    steps:
      - run: 
          name: Install Maven tool
          command: |
            [ -f /usr/bin/mvn ] && echo "Maven is already installed." || sudo apt install maven -y





  #                            88
  #                            88                         ,d             ,d                             ,d
  #                            88                         88             88                             88
  #   8b,dPPYba,   ,adPPYba,   88,dPPYba,    ,adPPYba,  MM88MMM        MM88MMM  ,adPPYba,  ,adPPYba,  MM88MMM  ,adPPYba,
  #   88P'   "Y8  a8"     "8a  88P'    "8a  a8"     "8a   88             88    a8P_____88  I8[    ""    88     I8[    ""
  #   88          8b       d8  88       d8  8b       d8   88             88    8PP"""""""   `"Y8ba,     88      `"Y8ba,
  #   88          "8a,   ,a8"  88b,   ,a8"  "8a,   ,a8"   88,            88,   "8b,   ,aa  aa    ]8I    88,    aa    ]8I
  #   88           `"YbbdP"'   8Y"Ybbd8"'    `"YbbdP"'    "Y888          "Y888  `"Ybbd8"'  `"YbbdP"'    "Y888  `"YbbdP"'
  #
  # ///////////////////////////////////////////////////////////////////////////
  # /// ROBOT INTEGRATION TESTS COMMANDS                                    ///
  # ///////////////////////////////////////////////////////////////////////////

  start-ehrbase-server:
    steps:
      # - openjdk-install/openjdk:    # (use w/ machine executor only)
      #     version: 11               #
      - install-maven
      - run:
          name: Start EHRbase server
          background: true
          command: |
            ls -la
            cd ehrbase
            EHRbase_VERSION=$(mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec)
            echo ${EHRbase_VERSION}
            java -jar application/target/application-${EHRbase_VERSION}.jar --cache.enabled=false > log


  # USE THIS COMMAND W/ DOCKER EXECUTOR ONLY!!! 
  run-robot-tests:
    description: Run integration tests written in Robot Framework
    parameters:
      include-tags:
        description: Which tests to inclue by TAGs (Robot syntax applies!)
        type: string
      test-suite-path:
        description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
        type: string
      test-suite-name:
        description: Titel of generated Robot Log/Report.html
        type: string
    steps:
      # - cache-out-python-requirements
      - install-python-requirements
      - run: jps
      - run:
          name: Wait until EHRbase server is ready
          command: |
            cd ehrbase
            grep -m 1 "Started EhrBase in" <(tail -f log)
      - run:
          name: EXECUTE ROBOT COMMAND
          no_output_timeout: 30m
          command: |
            cd ~/projects/ehrbase/tests
            robot --include << parameters.include-tags >> \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --console dotted \
                  --loglevel TRACE \
                  --noncritical not-ready \
                  --flattenkeywords for \
                  --flattenkeywords foritem \
                  --flattenkeywords name:_resources.* \
                  --outputdir results/<< parameters.test-suite-name >> \
                  --name << parameters.test-suite-name >> \
                  -v nodocker \
                  robot/<< parameters.test-suite-path >>/
      # - cache-in-python-requirements
      - save-test-results-folder
      - store_test_results:
          path: ~/projects/ehrbase/tests/results/
      - store_artifacts:
          path: ~/projects/ehrbase/tests/results/


  # # USE THIS COMMAND W/ MACHINE EXECUTOR ONLY!!!
  # run-robot-tests:
  #   description: Run integration tests written in Robot Framework
  #   parameters:
  #     include-tags:
  #       description: Which tests to inclue by TAGs (Robot syntax applies!)
  #       type: string
  #     test-suite-path:
  #       description: Target test-suite given by it's folder name e.g. COMPOSITION_TESTS
  #       type: string
  #     test-suite-name:
  #       description: Titel of generated Robot Log/Report.html
  #       type: string
  #   steps:
  #     - configure-python-version
  #     # - cache-out-python-requirements
  #     - install-python-requirements
  #     - run: pip list
  #     - run:
  #         name: EXECUTE ROBOT COMMAND
  #         no_output_timeout: 30m
  #         command: |
  #           cd ~/projects/ehrbase/tests
  #           robot --include << parameters.include-tags >> \
  #                 --exclude TODO -e future -e obsolete -e libtest \
  #                 --console dotted \
  #                 --loglevel TRACE \
  #                 --noncritical not-ready \
  #                 --flattenkeywords for \
  #                 --flattenkeywords foritem \
  #                 --flattenkeywords name:_resources.* \
  #                 --outputdir results/<< parameters.test-suite-name >> \
  #                 --name << parameters.test-suite-name >> \
  #                 robot/<< parameters.test-suite-path >>/
  #     # - cache-in-python-requirements
  #     - save-test-results-folder
  #     - store_test_results:
  #         path: ~/projects/ehrbase/tests/results/
  #     - store_artifacts:
  #         path: ~/projects/ehrbase/tests/results/

  
  configure-python-version:
    description: Configure Python version to 3.7.0
    steps:
      - run:
          name: Configure Python version to 3.7.0
          command: |
            pyenv global 3.7.0


  install-python-requirements:
    description: Install Python requirements
    steps:
      # - cache-out-python-requirements
      - run:
          name: Install Python requirements
          command: |
            python --version
            python -c "import site; print(site.getsitepackages())"
            pip install -r ~/projects/ehrbase/tests/requirements.txt
      # - cache-in-python-requirements
  

  cache-in-python-requirements:
    description: Save all caches in interation tests job
    steps:
      - run:
          when: always
          name: Save PIP cache
          command: |
            ls -la ~/.cache
            ls -la /opt/circleci/
      - save_cache:
          key: pip-v1-{{ checksum "~/projects/ehrbase/tests/requirements.txt" }}
          paths:
            # - ~/.cache/pip
            - /opt/circleci/.pyenv/versions/3.7.0/lib/python3.7/site-packages


  cache-out-python-requirements:
    description: Restore all caches in interation tests job
    steps:
      - restore_cache:
          keys:
            - pip-v1-


  save-test-results-folder:
    description: Persist Robot tests folder to workspace
    steps:
      - run:
          when: always
          command: |
            echo "persist test results"
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - projects/ehrbase/tests/results


  restore-test-results-folder:
    description: Attach Robot tests folder back to workspace
    steps:
      - attach_workspace:
          at: /home/circleci/


  merge-robot-outputs:
    description: Merge Robot Results from Parallel Tests
    steps:
      # - configure-python-version                    # (use w/ machine executor only)
      - run:
          command: |
            pip install robotframework
      - run:
          name: POST PROCESS & MERGE TEST RESULTS
          when: always
          command: |
            cd ehrbase/tests

            # Create Log/Report with ALL DETAILS
            rebot --outputdir results \
                  --name EHRbase \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --removekeywords for \
                  --removekeywords wuks \
                  --loglevel TRACE \
                  --noncritical not-ready \
                  --output EHRbase-output.xml \
                  --log EHRbase-log.html \
                  --report EHRbase-report.html \
                  results/*/*.xml
      - run:
          name: GENERATE TEST SUMMARY
          when: always
          command: |
            cd ehrbase/tests

            # Create JUNIT report from merged results
            rebot --outputdir results \
                  --exclude TODO -e future -e obsolete -e libtest \
                  --noncritical not-ready \
                  --xunit junit-output.xml --xunitskipnoncritical \
                  --log NONE \
                  --report NONE \
                  results/EHRbase-output.xml
      - save-test-results-folder
      - store_test_results:
          path: ~/projects/ehrbase/tests/results/
      - store_artifacts:
          path: ~/projects/ehrbase/tests/results/





# ///////////////////////////////////////////////////////////////////////////
# /// CIRCLECI META                                                       ///
# ///////////////////////////////////////////////////////////////////////////


orbs:
  maven: circleci/maven@1.0.1
  openjdk-install: cloudesire/openjdk-install@1.2.3
  sonarcloud: sonarsource/sonarcloud@1.0.2

executors:
  docker-python3-java11:
    working_directory: ~/projects
    docker:
      - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073

  docker-py3-java11-postgres:
    working_directory: ~/projects
    docker:
      - image: circleci/python@sha256:e1c98a85c5ee62ac52a2779fe5abe2677f021c8e3158e4fb2d569c7b9c6ac073
      - image: ehrbaseorg/ehrbase-postgres:10
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres

  vm-ubuntu-1604:
    working_directory: ~/projects
    # working_directory: /mnt/ramdisk      # TODO: @wlad TEST THIS FOR POSSIBLE
    machine:                               #             SPEED IMPROVEMENT !!!
      image: ubuntu-1604:201903-01










# oooooooooo.        .o.         .oooooo.   oooo    oooo ooooo     ooo ooooooooo.
# `888'   `Y8b      .888.       d8P'  `Y8b  `888   .8P'  `888'     `8' `888   `Y88.
#  888     888     .8"888.     888           888  d8'     888       8   888   .d88'
#  888oooo888'    .8' `888.    888           88888[       888       8   888ooo88P'
#  888    `88b   .88ooo8888.   888           888`88b.     888       8   888
#  888    .88P  .8'     `888.  `88b    ooo   888  `88b.   `88.    .8'   888
# o888bood8P'  o88o     o8888o  `Y8bood8P'  o888o  o888o    `YbodP'    o888o
#
# [ BACKUP ]

  # Example-how-to-use-INSTALL-JAVA11-ORB:
  #   executor: vm-ubuntu-1604
  #   steps:
  #     - run: echo "run integration tests job mock"
  #     - openjdk-install/openjdk:
  #         version: 11
  #     - restore-ehrbase-workspace
  #     - run-robot-tests:
  #         include-tags: "CONTRIBUTION"
  #         test-suite-path: "CONTRIBUTION_TESTS"
  #         test-suite-name: "CONTRIBUTION"



  # force-ehrbase-build-to-use-local-sdk-version:
  #   steps:
  #     - run: sudo apt install maven -y
  #     - run:
  #         name: Adjust SDK version number in EHRbase's pom
  #         description: |
  #           We have to provide the version of locally build openEHR_SDK in EHRbase's POM
  #           to make sure that EHRbase builds succesfully w/ latest changes applied to the SDK.
  #           "mvn versions:set-property" is an simple way to achieve exactly that. Ufortunately
  #           it triggers a check for SDK dependency updates from jitpack.io
  #           which can take up to 15 minutes!

  #           Using Maven's -o (for offline) flag can help to prevent check for update but
  #           it fails when dependencies are not cached first.
  #           After caching dependencies it works but not 100% reliable.

  #           As a more robust solution install xmlstarlet (a cli tool to handle XML) and 
  #           use it as a fallback if the 'mvn -o' approach starts to fail.
  #         command: |
  #           SDK_VERSION=$(cat ~/projects/SDK_VERSION)
  #           echo $SDK_VERSION
  #           cd ~/projects/ehrbase
  #           mvn versions:set-property -Dproperty=ehrbase.sdk.version -DnewVersion=$SDK_VERSION -o



  # command-check-commit-message-contains-string:
  #   steps:
  #     - run:
  #         name: Check if commit message contains 'some-string'
  #         command: |
  #           if [[ ${last_commit} == *[some-string]* ]]
  #           then
  #             # Generate and publish API docs
  #           fi

  #           if [[ ${last_commit} == *"minor"* ]]; then echo hello wlad; fi

  #           STR='GNU/Linux is an operating system'
  #           SUB='Linux'

  #           case $STR in

  #             *"$SUB"*)
  #               echo -n "It's there."
  #               ;;
  #           esac



  #   save-jacoco-unit-coverage:
  #   steps:
  #     - run:
  #         name: Save Jacoco code coverage (unit tests)
  #         command: |
  #           mkdir -p ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-ut-coverage ~/code-coverage/
  #     - store_artifacts:
  #         path: ~/code-coverage/jacoco-ut-coverage

  # save-jacoco-integration-coverage:
  #   steps:
  #     - run:
  #         name: Save Jacoco code coverage (overall & integration tests)
  #         command: |
  #           mkdir -p ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-it-coverage ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-overall-coverage ~/code-coverage/
  #     - store_artifacts:
  #         path: ~/code-coverage/jacoco-it-coverage
  
  # save-jacoco-overall-coverage:
  #   steps:
  #     - run:
  #         name: Save Jacoco's overall code coverage report (w/ unit & integr. tests)
  #         command: |
  #           mkdir -p ~/code-coverage/
  #           cp -r test-coverage/target/site/jacoco-overall-coverage ~/code-coverage/
  #     - store_artifacts:
  #         path: ~/code-coverage/jacoco-overall-coverage
  #     # - persist_to_workspace:
  #     #     root: /home/circleci
  #     #     paths:
  #     #       - code-coverage/jacoco-overall-coverage
